(undo-tree-save-format-version . 1)
"488eec9631f6d563edd28a221144c50875fa37a1"
[nil nil nil nil (26274 3805 186685 0) 0 nil]
([nil nil ((apply -3 800 871 undo--wrap-and-run-primitive-undo 800 871 ((807 . 810) 861))) nil (26274 3805 186681 0) 0 nil])
([nil nil ((apply 3 572 603 undo--wrap-and-run-primitive-undo 572 603 ((#(";; " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -579) 606))) nil (26274 3809 622468 0) 0 nil])
([nil nil ((apply 3 644 706 undo--wrap-and-run-primitive-undo 644 706 ((#(";; " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -651)))) nil (26274 3840 790441 0) 0 nil])
([nil nil ((apply -3 572 607 undo--wrap-and-run-primitive-undo 572 607 ((579 . 582)))) nil (26274 3840 790437 0) 0 nil])
([nil nil ((#("(add-hook 'window-setup-hook 'toggle-frame-maximized t)" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 54 (fontified t) 54 55 (face (rainbow-delimiters-depth-3-face) fontified t)) . 654) (t 26274 3840 0 0)) nil (26274 3874 612993 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 654)) nil (26274 3874 612993 0) 0 nil])
([nil nil ((#("	      ;; 使用下面这种配置方法可以保证在使用emacs server和client时，也能保证在启动的时候窗口最大化" 0 7 (fontified t) 7 10 (face font-lock-comment-delimiter-face fontified t) 10 63 (face font-lock-comment-face fontified t)) . 654)) nil (26274 3874 612992 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 654)) nil (26274 3874 612991 0) 0 nil])
([nil nil ((#("	      ;; 问题的关键在于frame" 0 7 (fontified t) 7 10 (face font-lock-comment-delimiter-face fontified t) 10 22 (face font-lock-comment-face fontified t)) . 654)) nil (26274 3874 612991 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 654)) nil (26274 3874 612990 0) 0 nil])
([nil nil ((#("	      ;; (add-to-list 'default-frame-alist '(fullscreen . maximized))" 0 7 (fontified t) 7 10 (face font-lock-comment-delimiter-face fontified t) 10 70 (face font-lock-comment-face fontified t)) . 654)) nil (26274 3874 612989 0) 0 nil])
([nil nil ((#("
	      " 0 1 (face font-lock-comment-face fontified t) 1 8 (fontified t)) . 646) (undo-tree-id138 . -1) (undo-tree-id139 . -8) (undo-tree-id140 . -8) (undo-tree-id141 . -8) (undo-tree-id142 . -8) (undo-tree-id143 . -8) (undo-tree-id144 . -8) (undo-tree-id145 . -8) (undo-tree-id146 . -8) (undo-tree-id147 . -8) (undo-tree-id148 . -8) (undo-tree-id149 . -8) (undo-tree-id150 . -8) (undo-tree-id151 . -8) (undo-tree-id152 . -8) (undo-tree-id153 . -8) (undo-tree-id154 . -8) (undo-tree-id155 . -8) (undo-tree-id156 . -8) (undo-tree-id157 . -8) (undo-tree-id158 . -8) (undo-tree-id159 . -8) (undo-tree-id160 . -8) (undo-tree-id161 . -8) 654) nil (26274 3874 612987 0) 0 nil])
([nil nil ((#(";; Start maximised (cross-platf)" 0 3 (face font-lock-comment-delimiter-face fontified t) 3 32 (face font-lock-comment-face fontified t)) . 614) (undo-tree-id97 . -32) (undo-tree-id98 . -32) (undo-tree-id99 . -32) (undo-tree-id100 . -32) (undo-tree-id101 . -32) (undo-tree-id102 . -32) (undo-tree-id103 . -32) (undo-tree-id104 . -32) (undo-tree-id105 . -32) (undo-tree-id106 . -32) (undo-tree-id107 . -32) (undo-tree-id108 . -32) (undo-tree-id109 . -32) (undo-tree-id110 . -32) (undo-tree-id111 . -32) (undo-tree-id112 . -32) (undo-tree-id113 . -32) (undo-tree-id114 . -32) (undo-tree-id115 . -32) (undo-tree-id116 . -32) (undo-tree-id117 . -32) (undo-tree-id118 . -32) (undo-tree-id119 . -32) (undo-tree-id120 . -32) (undo-tree-id121 . -32) (undo-tree-id122 . -32) (undo-tree-id123 . -32) (undo-tree-id124 . -32) (undo-tree-id125 . -32) (undo-tree-id126 . -32) (undo-tree-id127 . -32) (undo-tree-id128 . -32) (undo-tree-id129 . -32) (undo-tree-id130 . -32) (undo-tree-id131 . -32) (undo-tree-id132 . -32) (undo-tree-id133 . -32) (undo-tree-id134 . -32) (undo-tree-id135 . -32) (undo-tree-id136 . -32) (undo-tree-id137 . -32)) nil (26274 3874 612968 0) 0 nil])
([nil nil ((#("
	      " 0 1 (face font-lock-comment-face fontified t) 1 8 (fontified t)) . 606) (undo-tree-id0 . -8) (undo-tree-id1 . -8) (undo-tree-id2 . -8) (undo-tree-id3 . -8) (undo-tree-id4 . -8) (undo-tree-id5 . -8) (undo-tree-id6 . -8) (undo-tree-id7 . -8) (undo-tree-id8 . -8) (undo-tree-id9 . -8) (undo-tree-id10 . -8) (undo-tree-id11 . -8) (undo-tree-id12 . -8) (undo-tree-id13 . -8) (undo-tree-id14 . -8) (undo-tree-id15 . -8) (undo-tree-id16 . -8) (undo-tree-id17 . -8) (undo-tree-id18 . -8) (undo-tree-id19 . -8) (undo-tree-id20 . -8) (undo-tree-id21 . -8) (undo-tree-id22 . -8) (undo-tree-id23 . -8) (undo-tree-id24 . -8) (undo-tree-id25 . -8) (undo-tree-id26 . -8) (undo-tree-id27 . -8) (undo-tree-id28 . -8) (undo-tree-id29 . -8) (undo-tree-id30 . -8) (undo-tree-id31 . -8) (undo-tree-id32 . -8) (undo-tree-id33 . -8) (undo-tree-id34 . -8) (undo-tree-id35 . -8) (undo-tree-id36 . -8) (undo-tree-id37 . -8) (undo-tree-id38 . -8) (undo-tree-id39 . -8) (undo-tree-id40 . -8) (undo-tree-id41 . -8) (undo-tree-id42 . -8) (undo-tree-id43 . -8) (undo-tree-id44 . -8) (undo-tree-id45 . -8) (undo-tree-id46 . -8) (undo-tree-id47 . -8) (undo-tree-id48 . -8) (undo-tree-id49 . -8) (undo-tree-id50 . -8) (undo-tree-id51 . -8) (undo-tree-id52 . -8) (undo-tree-id53 . -8) (undo-tree-id54 . -8) (undo-tree-id55 . -8) (undo-tree-id56 . -8) (undo-tree-id57 . -8) (undo-tree-id58 . -8) (undo-tree-id59 . -8) (undo-tree-id60 . -8) (undo-tree-id61 . -8) (undo-tree-id62 . -8) (undo-tree-id63 . -8) (undo-tree-id64 . -8) (undo-tree-id65 . -8) (undo-tree-id66 . -8) (undo-tree-id67 . -8) (undo-tree-id68 . -8) (undo-tree-id69 . -8) (undo-tree-id70 . -8) (undo-tree-id71 . -8) (undo-tree-id72 . -8) (undo-tree-id73 . -1) (undo-tree-id74 . -8) (undo-tree-id75 . -8) (undo-tree-id76 . -8) (undo-tree-id77 . -8) (undo-tree-id78 . -8) (undo-tree-id79 . -8) (undo-tree-id80 . -8) (undo-tree-id81 . -8) (undo-tree-id82 . -8) (undo-tree-id83 . -8) (undo-tree-id84 . -8) (undo-tree-id85 . -8) (undo-tree-id86 . -8) (undo-tree-id87 . -8) (undo-tree-id88 . -8) (undo-tree-id89 . -8) (undo-tree-id90 . -8) (undo-tree-id91 . -8) (undo-tree-id92 . -8) (undo-tree-id93 . -8) (undo-tree-id94 . -8) (undo-tree-id95 . -8) (undo-tree-id96 . -8) 614) nil (26274 3874 612933 0) 0 nil])
([nil nil ((apply 3 572 603 undo--wrap-and-run-primitive-undo 572 603 ((#(";; " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -579) 606))) nil (26274 3874 612878 0) 0 nil])
([nil nil ((apply 2 1178 1239 undo--wrap-and-run-primitive-undo 1178 1239 ((#(";;" 0 2 (face font-lock-comment-delimiter-face fontified t)) . -1185) 1206))) nil (26274 3882 772324 0) 0 nil])
([nil current ((apply -3 1178 1243 undo--wrap-and-run-primitive-undo 1178 1243 ((1185 . 1188) 1178))) nil (26275 2428 56663 0) 0 nil])
nil
